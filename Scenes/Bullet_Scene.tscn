[gd_scene load_steps=5 format=2]

[ext_resource path="res://resources/robotfree/Bullet.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

# variables
export var movementDirection = 1
export var speed = 800
export var power = 0

var velocity = Vector2(0, 0)
var noValidCollision = []
var noValidArea = false

const bricksParticle_scene = preload(\"res://Scenes/Brick_Particle_Scene.tscn\")
const powerUp_scene = preload(\"res://Scenes/Power_Up_Scene.tscn\")
const bone_scene = preload(\"res://Scenes/Bone_Scene.tscn\")
const blood_scene = preload(\"res://Scenes/Blood_Splash_Particle_Scene.tscn\")

func _ready():
	set_process(true)
	pass
	
	
func _process(delta):
	_set_speed(delta)
	
	if (power == 0):
		self.scale = Vector2(0.2, 0.2)
	elif (power == 1):
		self.scale = Vector2(0.22, 0.22)
	elif (power == 2):
		self.scale = Vector2(0.25, 0.25)
		self.modulate = Color(\"#a300ff\")
		
	var collider1 = move_and_collide(Vector2(velocity.x, 0))
	var collider2 = move_and_collide(Vector2(0, velocity.y))
	_check_collision_objects(delta)
	_remove_if_brick(collider1)
	_remove_if_brick(collider2)
	
	# Ensures bullet disapears upon hitting invalid objects
	if (noValidCollision.size() == 2 and noValidArea):
		self.queue_free()
		
	pass


func _set_speed(delta):
	velocity.x = speed * delta * movementDirection
	velocity.y = 0
	pass
	

func _remove_if_brick(object):
	if (object and object.collider):
		var objectParent = object.collider.get_parent()
		if (objectParent.is_in_group(\"Bricks\")):
			#add the particle effect of the brick breaking
			var particleEffect = bricksParticle_scene.instance()
			particleEffect.get_node(\".\").set_emitting(true)
			particleEffect.position = self.get_position()  - Vector2(0, 20)
			get_tree().root.add_child(particleEffect)
			#remove the brick
			objectParent.queue_free()
			if (power < 2):
				self.queue_free()
		elif (objectParent.is_in_group(\"PowerUpBrick\")):
			var particleEffect = bricksParticle_scene.instance()
			particleEffect.get_node(\".\").set_emitting(true)
			particleEffect.position = self.get_position()  - Vector2(0, 20)
			get_tree().root.add_child(particleEffect)
			#remove the brick
			objectParent.queue_free()
			# create actual power up
			var powerUp = powerUp_scene.instance()
			powerUp.position = objectParent.position - Vector2(0, 50)
			get_tree().root.add_child(powerUp)
			if (power < 2):
				self.queue_free()
		else:
			noValidCollision.append(true)
	pass

	
func _check_collision_objects(delta):
	var area = get_node(\"Area2D\").get_overlapping_bodies()
	if (area.size() != 0):
		for body in area:
			if (body.is_in_group(\"Enemy_drop\")):
				print(\"enemy\")
				body.queue_free()
				self.visible = false
				
				#blood
				var blood = blood_scene.instance()
				blood.get_node(\".\").set_emitting(true)
				blood.position = self.get_position()
				get_tree().root.add_child(blood)
				
				#bones
				var bones = bone_scene.instance()
				bones.position = self.get_position()  - Vector2(0, -70)
				get_tree().root.add_child(bones)
				self.queue_free()
			if (body.is_in_group(\"Enemy_saw\")):
				if (power > 1):
					body.queue_free()
				self.queue_free()
			else:
				noValidArea = true
	
	pass"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 2.6098, 5.26883 )

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 12.3044, 8.5176 )

[node name="Bullet" type="KinematicBody2D"]
scale = Vector2( 0.3, 0.3 )
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
hframes = 5

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 2.79862, -0.194689 )
scale = Vector2( 4.88204, 12.9419 )
shape = SubResource( 2 )

[node name="Area2D" type="Area2D" parent="."]
position = Vector2( -10.3074, -5.49092 )
scale = Vector2( 4.92382, 3.08256 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 3.01247, 1.758 )
scale = Vector2( 2.10163, 3.05057 )
shape = SubResource( 3 )

