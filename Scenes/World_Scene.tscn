[gd_scene load_steps=8 format=2]

[ext_resource path="res://resources/HUD/health/Health1.png" type="Texture" id=1]
[ext_resource path="res://resources/HUD/health/Health3.png" type="Texture" id=2]
[ext_resource path="res://resources/HUD/health/Health2.png" type="Texture" id=3]
[ext_resource path="res://resources/HUD/power/Power1.png" type="Texture" id=4]
[ext_resource path="res://resources/HUD/power/Power3.png" type="Texture" id=5]
[ext_resource path="res://resources/HUD/power/Power2.png" type="Texture" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var level = 0 # starting level
var characterStats = {\"health\": 3, \"power\": 0, \"ammo\": 10, \"type\": \"Robot\"} # player character attributes


# Called when the node enters the scene tree for the first time.
func _ready():
	# set the game to full screen
	OS.window_fullscreen = true
	OS.keep_screen_on = true
	# start the first level
	advance_to_next_level()
	pass
	
	

#Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	# get player input
	handle_events()
	pass


func handle_events():
	# check if the user quits the game
	if (Input.is_action_just_pressed(\"ui_cancel\")):
		if (!OS.window_fullscreen): 
			get_tree().quit()
		else:
			OS.window_fullscreen = false
	pass


# triggered by signals set up in get_end_door() 
func advance_to_next_level():
	
	# remove previous level if exists
	var thisLevel = get_tree().get_nodes_in_group(\"level\").front()
	if (thisLevel):
		thisLevel.queue_free()
	
	# increment level and add next level as active scene
	level += 1;
	create_level()
	pass


func create_level():
	var level_scene = load(\"res://Scenes/Levels/Level_\" + str(level) + \"_Scene.tscn\")
	if (level_scene):
		level_scene = level_scene.instance()
		# create next level scene
		connect_to_level_signals(level_scene)
				
		# set the next level as the current scene
		get_tree().root.call_deferred(\"add_child\", level_scene)
		get_tree().call_deferred(\"set_current_scene\", level_scene)
		print(\":: started level \" + str(level) + \" ::\")


func connect_to_level_signals(level):
	if (level):
		if (!level.is_connected(\"entered_level\", self, \"setup_level\")):
			level.connect(\"entered_level\", self, \"setup_level\")
#		if (!level.is_connected(\"exit_level\", self, \"reset_current_scene\")):
#			level.connect(\"exit_level\", self, \"setup_level\")


func reset_current_scene(character):
	# remove level
	var currentLevel = get_tree().get_nodes_in_group(\"level\").front()
	if (currentLevel):
		get_tree().root.remove_child(currentLevel)
		currentLevel.free()
		
	# recreate level
	create_level()


func setup_level():
	# get the end door for current level and listen for events, if main character enters the door
	# the signal will emit and the next level will be created
	var end_door = get_tree().get_nodes_in_group(\"end_door\").front()
	if (end_door and !end_door.is_connected(\"enteredEndDoor\", self, \"advance_to_next_level\")):
		end_door.connect(\"enteredEndDoor\", self, \"advance_to_next_level\")
		print(\":: end door connected ::\")
	
	var character = get_tree().get_nodes_in_group(\"character\").front()
	if (!character):
		character = load(\"res://Scenes/Characters/\" + characterStats[\"type\"] + \"/Character_Scene.tscn\").instance()
		character.position.x = 300
		character.position.y = 0
		get_tree().root.add_child(character)
	else:
		# reset character position to start of level
		if (character.health < 0):
			print(\"character died, respawning...\")
			character._ready()
		
		character.position.x = 300
		character.position.y = 0
	
	if (character and !character.is_connected(\"reload\", self, \"reset_current_scene\")):
		character.connect(\"reload\", self, \"reset_current_scene\")
	
	pass
	
"

[node name="World" type="Node2D"]
position = Vector2( 0, -2.72073 )
script = SubResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="." groups=[
"status_bar",
]]

[node name="HealthProgress" type="TextureProgress" parent="CanvasLayer"]
margin_left = 27.2722
margin_top = 752.194
margin_right = 241.272
margin_bottom = 816.194
rect_scale = Vector2( 0.5, 0.5 )
max_value = 3.0
value = 2.0
texture_under = ExtResource( 1 )
texture_over = ExtResource( 2 )
texture_progress = ExtResource( 3 )
tint_under = Color( 0.564706, 0.0431373, 0.0431373, 1 )
tint_over = Color( 1, 0, 0, 1 )
tint_progress = Color( 0.580392, 0.278431, 0.278431, 1 )

[node name="PowerProgress" type="TextureProgress" parent="CanvasLayer"]
margin_left = 169.77
margin_top = 752.194
margin_right = 383.77
margin_bottom = 816.194
rect_scale = Vector2( 0.5, 0.5 )
max_value = 3.0
value = 2.0
texture_under = ExtResource( 4 )
texture_over = ExtResource( 5 )
texture_progress = ExtResource( 6 )
