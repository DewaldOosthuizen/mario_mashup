[gd_scene load_steps=9 format=2]

[ext_resource path="res://Scenes/Levels/Level_1_Scene.tscn" type="PackedScene" id=1]
[ext_resource path="res://resources/HUD/health/Health1.png" type="Texture" id=2]
[ext_resource path="res://resources/HUD/health/Health3.png" type="Texture" id=3]
[ext_resource path="res://resources/HUD/health/Health2.png" type="Texture" id=4]
[ext_resource path="res://resources/HUD/power/Power1.png" type="Texture" id=5]
[ext_resource path="res://resources/HUD/power/Power3.png" type="Texture" id=6]
[ext_resource path="res://resources/HUD/power/Power2.png" type="Texture" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var level = 1
var end_door

# Called when the node enters the scene tree for the first time.
func _ready():
	# set the game to full screen
	OS.window_fullscreen = true
	pass

#Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if(end_door == null):
		get_end_door()
		
	handle_events()
	pass


func handle_events():
	# check if the user quits the game
	if (Input.is_action_just_pressed(\"ui_cancel\")):
		if (!OS.window_fullscreen): # if not in full screen, quit game
			get_tree().quit()
		else: 						# if in full screen, exit full screen
			OS.window_fullscreen = false
	pass
	
# triggered by signals set up in get_end_door() 
func advance_to_next_level():
	# remove current level if exists
	var thisLevel = get_tree().get_nodes_in_group(\"level\")
	if (thisLevel != null && thisLevel.size() > 0):
		thisLevel[0].queue_free()
	
	# increment level and add next level as active scene
	level += 1;
	print(\"starting level \" + str(level) + \"...\")
	var nextLevel_scene = load(\"res://Scenes/Levels/Level_\" + str(level) + \"_Scene.tscn\")
	var nextLevel = nextLevel_scene.instance()
	get_tree().root.call_deferred(\"add_child\", nextLevel)
	get_tree().call_deferred(\"set_current_scene\", nextLevel)
	end_door = null
	print(\":: started level \" + str(level) + \" ::\")
	pass
	

func get_end_door():
	# get the end door for current level and listen for events, if main character enters the door
	# the signal will emit and the next level will be created
	var end_doors = get_tree().get_nodes_in_group(\"end_door\")
	if (end_doors != null && end_doors.size() > 0):
		end_door = end_doors[0]
		end_door.connect(\"enteredEndDoor\", self, \"advance_to_next_level\")
	pass"

[node name="World" type="Node2D"]
position = Vector2( 0, -2.72073 )
script = SubResource( 1 )

[node name="Level1" parent="." instance=ExtResource( 1 )]

[node name="CanvasLayer" type="CanvasLayer" parent="." groups=[
"status_bar",
]]

[node name="HealthProgress" type="TextureProgress" parent="CanvasLayer"]
margin_left = 27.2722
margin_top = 752.194
margin_right = 241.272
margin_bottom = 816.194
rect_scale = Vector2( 0.5, 0.5 )
max_value = 3.0
value = 2.0
texture_under = ExtResource( 2 )
texture_over = ExtResource( 3 )
texture_progress = ExtResource( 4 )
tint_under = Color( 0.564706, 0.0431373, 0.0431373, 1 )
tint_over = Color( 1, 0, 0, 1 )
tint_progress = Color( 0.580392, 0.278431, 0.278431, 1 )

[node name="PowerProgress" type="TextureProgress" parent="CanvasLayer"]
margin_left = 169.77
margin_top = 752.194
margin_right = 383.77
margin_bottom = 816.194
rect_scale = Vector2( 0.5, 0.5 )
max_value = 3.0
value = 2.0
texture_under = ExtResource( 5 )
texture_over = ExtResource( 6 )
texture_progress = ExtResource( 7 )

