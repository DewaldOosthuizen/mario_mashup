[gd_scene load_steps=10 format=2]

[ext_resource path="res://resources/Characters/robotfree/png/Objects/Bullet_000.png" type="Texture" id=1]
[ext_resource path="res://resources/Characters/robotfree/png/Objects/Bullet_001.png" type="Texture" id=2]
[ext_resource path="res://resources/Characters/robotfree/png/Objects/Bullet_002.png" type="Texture" id=3]
[ext_resource path="res://resources/Characters/robotfree/png/Objects/Bullet_003.png" type="Texture" id=4]
[ext_resource path="res://resources/Characters/robotfree/png/Objects/Bullet_004.png" type="Texture" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

# variables
export var movementDirection = 1
export var speed = 800
export var power = 0

var velocity = Vector2(0, 0)
var noValidCollision = []
var deltaTime = 0

const bricksParticle_scene = preload(\"res://Scenes/Environment/Brick_1_Particle_Scene.tscn\")
const powerUp_scene = preload(\"res://Scenes/Power_Up_Scene.tscn\")
const blood_scene = preload(\"res://Scenes/Blood_Particle_Scene.tscn\")
const muzzle_scene = preload(\"res://Scenes/Characters/Robot/Muzzle_Scene.tscn\")

onready var sprite = get_node(\"AnimatedSprite\")

func _ready():
	create_muzzle()
	set_process(true)
	get_node(\"VisibilityNotifier2D\").connect(\"screen_exited\", self, \"_screen_exited\")
	pass

func _screen_exited():
	self.queue_free()
	
func _process(delta):
	deltaTime += delta
	_set_speed(delta)
	_animate()
	
	if (power == 0):
		self.scale = Vector2(0.2, 0.2)
	elif (power == 1):
		self.scale = Vector2(0.22, 0.22)
	elif (power == 2):
		self.scale = Vector2(0.25, 0.25)
		self.modulate = Color(\"#a300ff\")
		
	var collider1 = move_and_collide(Vector2(velocity.x, velocity.y))
	_check_collision_objects()
	_remove_if_brick(collider1)
	
	# Ensures bullet disapears upon hitting invalid objects
	if (noValidCollision.size() == 2):
		self.queue_free()
		
	pass


func _set_speed(delta):
	velocity.x = speed * delta * movementDirection
	velocity.y = 0
	pass

func create_muzzle():
	var muzzle = muzzle_scene.instance()
	
	if (movementDirection == 1):
		muzzle.position = self.position - Vector2(-20, 1)
	else:
		muzzle.position = self.position - Vector2(20, 1)
	
	get_tree().root.add_child(muzzle)
	pass
	
func _animate():
	sprite.play()
	pass	

func _remove_if_brick(object):
	if (object and object.collider):
		var objectParent = object.collider.get_parent()
		if (objectParent.is_in_group(\"brick\")):
			objectParent.break_object()
			if (power < 2):
				self.queue_free()
		elif (objectParent.is_in_group(\"power_up_brick\")):
			objectParent.break_object()
			if (power < 2):
				self.queue_free()
		else:
			noValidCollision.append(true)
	pass

	
func _check_collision_objects():
	var area = get_node(\"Area2D\").get_overlapping_bodies()
	if (area.size() != 0):
		for body in area:
			if (body.is_in_group(\"enemy_character\")):
				body._take_damage(30)
				self.queue_free()
			if (body.is_in_group(\"enemy_saw\")):
				if (power > 1):
					body.queue_free()
				self.queue_free()
	
	pass"

[sub_resource type="SpriteFrames" id=2]
animations = [ {
"frames": [ ExtResource( 1 ), ExtResource( 2 ), ExtResource( 3 ), ExtResource( 4 ), ExtResource( 5 ) ],
"loop": true,
"name": "bullet",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 1.02742, 5.26883 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 15.6892, 5.28616 )

[node name="Bullet" type="KinematicBody2D"]
scale = Vector2( 0.3, 0.3 )
script = SubResource( 1 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 2 )
animation = "bullet"
speed_scale = 1.5

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 2.79862, -0.194689 )
scale = Vector2( 4.88204, 12.9419 )
shape = SubResource( 3 )

[node name="Area2D" type="Area2D" parent="."]
position = Vector2( -10.3074, -5.49092 )
scale = Vector2( 4.92382, 3.08256 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 3.01247, 1.758 )
scale = Vector2( 2.10163, 3.05057 )
shape = SubResource( 4 )

[node name="VisibilityNotifier2D" type="VisibilityNotifier2D" parent="."]
